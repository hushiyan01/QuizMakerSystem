/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.isom.a4_team_5.gui;

import com.isom.a4_team_5.Question;
import com.isom.a4_team_5.Quiz;
import com.isom.a4_team_5.QuizMakerSystem;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.util.*;


/**
 * @author hushiyan
 */
public class CreateQuizGUI extends javax.swing.JFrame {

    private LinkedList<Question> questions;

    /**
     * Creates new form NewJFrame
     */
    public CreateQuizGUI() {
        questions = QuizMakerSystem.getQuestions();
        initComponents();
        initComboBox();
        int questionTableWidth = questionTable.getWidth();
        int selectTableWidth = selectedTable.getWidth();
        questionTable.getColumnModel().getColumn(0).setPreferredWidth((int) (questionTableWidth * 0.1));
        questionTable.getColumnModel().getColumn(1).setPreferredWidth((int) (questionTableWidth * 0.7));

        selectedTable.getColumnModel().getColumn(0).setPreferredWidth((int) (selectTableWidth * 0.2));
        selectedTable.getColumnModel().getColumn(1).setPreferredWidth((int) (selectTableWidth * 0.7));
        selectedTable.getColumnModel().getColumn(2).setPreferredWidth((int) (selectTableWidth * 0.1));
        refreshSelectTable("");
    }

    private void initComboBox() {
        String[] types = questions.stream().map(question -> {
            String[] tmp = question.getClass().getName().split("\\.");
            return tmp[tmp.length - 1];
        }).distinct().toArray(String[]::new);

        for (String t : types) typeComboBox.addItem(t);
        typeComboBox.addItem("");
        typeComboBox.setSelectedItem("");
    }

    private LocalDate dateTransfer(Date d) {
        Calendar calendar = Calendar.getInstance();
       calendar.setTime(d);
        int y = calendar.get(Calendar.YEAR);
        int m = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);
       return LocalDate.of(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));
    }

    private boolean quizChecker(String t) {
        HashSet<String> titlesSet = new HashSet<>(Arrays.asList(QuizMakerSystem.getQuizTitles()));
        return titlesSet.contains(t);
    }


    private void refreshSelectTable(String type) {
        DefaultTableModel dm = (DefaultTableModel) questionTable.getModel();
        dm.getDataVector().removeAllElements();
        questionTable.revalidate();
        DefaultTableModel model = (DefaultTableModel) questionTable.getModel();
        questions.forEach(question -> {
            String[] questionClass = question.getClass().getName().split("\\.");
            String questionType = questionClass[questionClass.length - 1];
            if (questionType.contains(type))
                model.addRow(new Object[]{questionType, question.getCompleteQuestionText()});
        });
    }

    private Question searchQuestionFromText(String questionText) {
        Optional<Question> res = questions.stream()
                .filter(question -> question.getCompleteQuestionText().contains(questionText))
                .findFirst();
        if (res.isEmpty()) return null;
        else return res.get();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createQuizButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionTable = new javax.swing.JTable();
        typeComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        addToSelectListButton = new javax.swing.JButton();
        deleteQuestionButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        quizTitleTextField = new javax.swing.JTextField();
        dueDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        openDate = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        createQuizButton.setText("Create Quiz");
        createQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createQuizButtonActionPerformed(evt);
            }
        });

        questionTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Quesion Type", "Question Text"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(questionTable);

        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        selectedTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Question Type", "Question Text", "Score"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        selectedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(selectedTable);

        jLabel4.setText("Selected Questions to be added to a quiz");

        addToSelectListButton.setText("add to selected items");
        addToSelectListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSelectListButtonActionPerformed(evt);
            }
        });

        deleteQuestionButton.setText("delete questions");
        deleteQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteQuestionButtonActionPerformed(evt);
            }
        });

        quizTitleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizTitleTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("quiz title");

        jLabel2.setText("quiz open date");

        jLabel3.setText("quiz due date");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(141, 141, 141)
                                .addComponent(jLabel3)
                                .addGap(76, 76, 76))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(quizTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addComponent(openDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(dueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(openDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(quizTitleTextField)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(dueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jLabel1))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel3)
                                                        .addComponent(jLabel2))))
                                .addContainerGap())
        );

        jLabel5.setText("question type filter");

        jLabel6.setText("Questions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(createQuizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(70, 70, 70)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(77, 77, 77)
                                                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 458, Short.MAX_VALUE)
                                                                .addComponent(addToSelectListButton))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(deleteQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane1)
                                                        .addComponent(jScrollPane2))))
                                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(typeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(addToSelectListButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteQuestionButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addComponent(createQuizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quizTitleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quizTitleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quizTitleTextFieldActionPerformed

    private void createQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createQuizButtonActionPerformed
        // TODO add your handling code here:
        LocalDate quizOpenDate, quizDueDate;

        String quizTitle;
        if (openDate.getDate() == null) {
            JOptionPane.showMessageDialog(null, "quiz open date can't be null!");
            return;
        } else {
            quizOpenDate = dateTransfer(openDate.getDate());
        }

        if (dueDate.getDate() == null) {
            JOptionPane.showMessageDialog(null, "quiz due date can't be null!");
            return;
        } else {
            quizDueDate = dateTransfer(dueDate.getDate());
        }

        if (quizDueDate.compareTo(quizOpenDate) < 0) {
            JOptionPane.showMessageDialog(null, "due date can't be earlier than open date");
            return;
        }

        if (selectedTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "please add some questions to the second table to create quiz!");
            return;
        }

        if (quizTitleTextField.getText() == null || quizTitleTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "quiz title can't be null or empty string!");
            return;
        } else if (quizChecker(quizTitleTextField.getText())) {
            JOptionPane.showMessageDialog(null, "quiz:" + quizTitleTextField.getText() + "has already been added! \nplease choose another quiz title!");
            return;
        } else quizTitle = quizTitleTextField.getText();

        Quiz quiz = new Quiz(quizTitle, quizOpenDate, quizDueDate);

        DefaultTableModel dm2 = (DefaultTableModel) selectedTable.getModel();
        for (int i = 0; i < dm2.getRowCount(); i++) {
            String questionText = (String) dm2.getDataVector().get(i).get(1);
            Integer score = (Integer) dm2.getDataVector().get(i).get(2);
            if (score == null) {
                JOptionPane.showMessageDialog(null, i + 1 + "th row is missing score value!");
                return;
            }
            Question question = searchQuestionFromText(questionText);
            quiz.addQuestion(question, score);
        }
        QuizMakerSystem.addQuiz(quiz);

        JOptionPane.showMessageDialog(null, "quiz has been added successfully");

    }//GEN-LAST:event_createQuizButtonActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
        refreshSelectTable((String) typeComboBox.getSelectedItem());
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void addToSelectListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSelectListButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dm1 = (DefaultTableModel) questionTable.getModel();
        DefaultTableModel dm2 = (DefaultTableModel) selectedTable.getModel();
        int[] rows = questionTable.getSelectedRows();
        for (int i : rows) {
            if(i<questionTable.getRowCount()){     // to avoid indexOutOfBound Exception: the select Rows' index sometimes can be larger than table size;
                Vector question = dm1.getDataVector().get(i);
                if (!checkDuplicateQuestion((String) question.get(1))) {
                    dm2.addRow(question);
                }
            }
        }
    }//GEN-LAST:event_addToSelectListButtonActionPerformed

    private boolean checkDuplicateQuestion(String questionText){
        DefaultTableModel dm2 = (DefaultTableModel) selectedTable.getModel();
        List<String> list = dm2.getDataVector().stream().map(vector -> (String) vector.get(1)).toList();
        HashSet<String> set = new HashSet<>(list);
        return set.contains(questionText);
    }

    private void selectedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedTableMouseClicked

    private void deleteQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteQuestionButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dm2 = (DefaultTableModel) selectedTable.getModel();
        int[] rows = selectedTable.getSelectedRows();
        HashSet<Integer> rowsSet = new HashSet<>();
        for (int i : rows) rowsSet.add(i);
        LinkedList<Vector> res = new LinkedList<>();

        for (int j = 0; j < selectedTable.getRowCount(); j++) {
            if (!rowsSet.contains(j)) res.add(dm2.getDataVector().get(j));
        }

        dm2.getDataVector().removeAllElements();
        res.forEach(dm2::addRow);
        selectedTable.revalidate();
    }//GEN-LAST:event_deleteQuestionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateQuizGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateQuizGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateQuizGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateQuizGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateQuizGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToSelectListButton;
    private javax.swing.JButton createQuizButton;
    private javax.swing.JButton deleteQuestionButton;
    private com.toedter.calendar.JDateChooser dueDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser openDate;
    private javax.swing.JTable questionTable;
    private javax.swing.JTextField quizTitleTextField;
    private javax.swing.JTable selectedTable;
    private javax.swing.JComboBox<String> typeComboBox;
    // End of variables declaration//GEN-END:variables
}
